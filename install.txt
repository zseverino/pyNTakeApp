*** Work in Progress***

## Installation
 In order to install and use the PyNTakeApp, there are three basic requirements:
  - File Storage - storing your print files
  - A Server - hosting the app online
  - A Relational Database - storing your information
  - Email - sending out emails to patrons

 There is a variety of ways to achieve these, so I will provide a list of options for each requirement, alongside an example.
 
#File Storage
  PyNTake uses django-storages (https://pypi.org/project/django-storages/) alongside the built-in django file system to manage storing your files externally. You have a variety of options from which to store your files on:
 - Amazon S3
 - Apache Libcloud
 - Azure Storage
 - Digital Ocean
 - Dropbox
 - FTP
 - Google Cloud Storage
 - SFTP

  Determine what storage platform is best for you. In our usage, we have used Google Cloud Storage and are moving to SFTP. Modify 'settings.py' located in the PyNTakeApp folder, to the specifcations outlined in https://pypi.org/project/django-storages/ for your chosen platform. 
  
 Ex: Google Cloud Storages
  1. Create a Google Cloud Platform account
  2. Create a Project and a bucket within as the specific location for the files
  3. Create a service account. (
  4. Make sure your service account has access to the bucket and appropriate permissions. (Using IAM Permissions)
  5. Ensure this service account is associated to the type of compute being used (Google Compute Engine (GCE), Google Kubernetes  Engine (GKE), Google Cloud Run (GCR), etc)
  6. Create the key and download your-project-XXXXX.json file.
  7. Add or Modify the following lines at 'settings.py' (Add in your bucket name and json key):
   "DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'"
   "GS_BUCKET_NAME = 'your_bucket_name_here'"
   "GS_CREDENTIALS = path/to/json/key" (If hosting publicly, use environment variables)
   
 Otherwise you will need to modify settings.py:
  - settings.py (delete):
  "
   DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
   GS_BUCKET_NAME = 'pyntake-model-storage'
   json_str = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
   json_data = json.loads(json_str)
   json_data['private_key'] = json_data['private_key'].replace('\\n', '\n')
   GS_CREDENTIALS = service_account.Credentials.from_service_account_info(json_data)
  "
  **And** add the correct lines/info that django-storages calls for your file storage provider.

#Database
 You not only have many choices on how to host your databse, you also have a lot of options on what kind of database to host and store your data on:
  - PostgreSQL (recommended)
  - MariaDB
  - MySQL
  - Oracle
  
 After choosing the kind of database you would want to use, you need to choose yur host provider. There are endless options for hosting databases, here are a    few:
  - Heroku
  - AWS
  - Google Cloud
  - Microsoft Azure
  - Digital Ocean
  and so on.
 
For easier out of the box use, it is suggested to bundle the database with server provider if possible ex. Heroku. 

Otherwise you will need to modify the following:
  - settings.py (modify):
   "
   #Database
   #https://docs.djangoproject.com/en/3.0/ref/settings/#databases
   DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    "
    With the corrrect information from your database provider.
 - settings.py (delete):
  "
   db_from_env = dj_database_url.config(conn_max_age=500)
   DATABASES['default'].update(db_from_env)
  "

#Server
 When it comes to choosing how you are hosting your version of the PyNTake App, you have a lot of great options, including but not limited to:
  - Heroku
  - AWS
  - Microsoft Azure
  - Google Cloud Platform
  - Digital Ocean
  - Python Anywhere
  
 Determine what storage platform is best for you, based upon the cost, support and additional services they may offer. For instance if you are using Google Cloud Storage for file storage you may want to do the same for hosting. Also some providers like Heroku may provide databases alongside hosting. Heres a great gettig starting guide with Django hosting: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Deployment
 
 Ex. Heroku (These guides does a better job than I ever could)
  - https://devcenter.heroku.com/categories/working-with-django
  - https://devcenter.heroku.com/articles/deploying-python
  - https://blog.heroku.com/from-project-to-productionized-python
  - https://tutorial-extensions.djangogirls.org/en/heroku/
   - As of writing this, **do not install django-heroku**, it breaks deployment
  
 List of Dependencies (Not including dependcies based upon file storage, and sever specific)
  - dj-database-url==0.5.0 (Not necessary but advised)
  - Django==3.0.7
  - django-crispy-forms==1.9.1
  - django-storages==1.9.1
  - django-smart-selects==1.5.6
  - gunicorn==20.0.4
  - whitenoise==5.1.0
  - psycopg2==2.8.5
  
#Email 
 Again, you have many options when it comes to email providers: Gmail, Outlook, Yahoo etc. Each has their own SMTP setup that can easily be found on google.
 You will need to modify the follwing:
  - settings.py:
  "
   EMAIL_HOST = 'smtp.gmail.com'
   EMAIL_USE_TLS = True
   EMAIL_PORT = 587
   EMAIL_HOST_USER = 'youremail@here.com'
   EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
  "
  If your are hosting publicy, you should os environment variables like 'EMAIL_HOST_PASSWORD' so your sensitive information is not public.
